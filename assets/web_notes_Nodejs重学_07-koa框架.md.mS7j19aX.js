import{_ as e,c as a,o,a5 as l}from"./chunks/framework.DwbewbAn.js";const k=JSON.parse('{"title":"koa 框架","description":"","frontmatter":{},"headers":[],"relativePath":"web_notes/Nodejs重学/07-koa框架.md","filePath":"web_notes/Nodejs重学/07-koa框架.md","lastUpdated":1709045840000}'),i={name:"web_notes/Nodejs重学/07-koa框架.md"},t=l('<h1 id="koa-框架" tabindex="-1">koa 框架 <a class="header-anchor" href="#koa-框架" aria-label="Permalink to &quot;koa 框架&quot;">​</a></h1><blockquote><p>前面我们已经学习了 express，另外一个非常流行的 Node Web 服务器框架就是 Koa。</p></blockquote><blockquote><p>Koa 官方的介绍：</p></blockquote><ul><li><p>koa：next generation web framework for node.js；</p></li><li><p>koa：node.js 的下一代 web 框架；</p><blockquote><p>事实上，koa 是 express 同一个团队开发的一个新的 Web 框架：</p></blockquote></li><li><p>目前团队的<code>核心开发者 TJ 的主要精力也在维护 Koa</code>，express 已经交给团队维护了；</p></li><li><p>Koa 旨在为 Web 应用程序和 API 提供<code>更小、更丰富和更强大的能力</code>；</p></li><li><p>相<code>对于 express 具有更强</code>的异步处理能力（后续我们再对比）；</p></li><li><p><code>Koa 的核心代码只有 1600+行</code>，是一个<code>更加轻量级的框架</code>；</p></li><li><p>我们<code>可以根据需要安装和使用中间件</code>；</p></li></ul><blockquote><p>事实上学习了 express 之后，学习 koa 的过程是很简单的；</p></blockquote><h2 id="koa-初体验" tabindex="-1">Koa 初体验 <a class="header-anchor" href="#koa-初体验" aria-label="Permalink to &quot;Koa 初体验&quot;">​</a></h2><blockquote><p>我们来体验一下 koa 的 Web 服务器，创建一个接口。</p></blockquote><ul><li>koa 也是通过注册中间件来完成请求操作的；</li></ul><blockquote><p>koa 注册的中间件提供了两个参数：</p></blockquote><blockquote><p>ctx：上下文（Context）对象；</p></blockquote><ul><li><p>koa 并没有像 express 一样，将 req 和 res 分开，而是将它们作为 ctx 的属性；</p></li><li><p>ctx 代表一次请求的上下文对象；</p></li><li><p>ctx.request：获取请求对象；</p></li><li><p>ctx.response：获取响应对象；</p><blockquote><p>next：本质上是一个 dispatch，类似于之前的 next；</p></blockquote></li><li><p>后续我们学习 Koa 的源码，来看一下它是一个怎么样的函数</p></li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-31-b7bd06.png" alt=""></p><h2 id="koa-中间件" tabindex="-1">Koa 中间件 <a class="header-anchor" href="#koa-中间件" aria-label="Permalink to &quot;Koa 中间件&quot;">​</a></h2><blockquote><p>koa 通过创建的 app 对象，注册中间件只能通过 use 方法：</p></blockquote><ul><li>Koa 并<code>没有提供methods的方式来注册中间件</code>；</li><li>也<code>没有提供path中间件来匹配路径</code>；</li></ul><blockquote><p>但是真实开发中我们如何将路径和 method 分离呢？</p></blockquote><ul><li>方式一：根据<code>request自己来判断</code>；</li><li>方式二：使用<code>第三方路由中间件</code>；</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-32-a262bf.png" alt=""></p><h2 id="路由的使用" tabindex="-1">路由的使用 <a class="header-anchor" href="#路由的使用" aria-label="Permalink to &quot;路由的使用&quot;">​</a></h2><blockquote><p>koa 官方并没有给我们提供路由的库，我们可以选择第三方库：<code>koa-router</code></p></blockquote><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @koa/router</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>我们可以先封装一个 user.router.js 的文件：</p></blockquote><blockquote><p>在 app 中将 router.routes()注册为中间件：</p></blockquote><blockquote><p>注意：allowedMethods 用于判断某一个 method 是否支持：</p></blockquote><ul><li>如果我们请求 get，那么是正常的请求，因为我们有实现 get；</li><li>如果我们请求 put、delete、patch，那么就自动报错： Method Not Allowed，状态码：405；</li><li>如果我们请求 link、copy、lock，那么久自动报错：Not Implemented，状态码：501；</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-33-03671c.png" alt=""></p><p><img src="https://img.xbin.cn/images/2023/10/10-20-34-ab4f2b.png" alt=""></p><h2 id="参数解析-params-query" tabindex="-1">参数解析：params - query <a class="header-anchor" href="#参数解析-params-query" aria-label="Permalink to &quot;参数解析：params - query&quot;">​</a></h2><blockquote><p>请求地址：<code>http://localhost:8000/users/123</code></p></blockquote><ul><li>获取 params：</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-37-fe4b2e.png" alt=""></p><blockquote><p>请求地址：<code>http://localhost:8000/login?username=why&amp;password=123</code></p></blockquote><ul><li>获取 query：</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-37-f94acf.png" alt=""></p><h2 id="参数解析-json" tabindex="-1">参数解析：json <a class="header-anchor" href="#参数解析-json" aria-label="Permalink to &quot;参数解析：json&quot;">​</a></h2><blockquote><p>请求地址：<code>http://localhost:8000/login</code></p></blockquote><blockquote><p>body 是 json 格式</p></blockquote><p><img src="https://img.xbin.cn/images/2023/10/10-20-38-52ed4c.png" alt=""></p><blockquote><p>获取 json 数据：</p></blockquote><ul><li>安装依赖： npm install koa-bodyparser;</li><li>使用 koa-bodyparser 的中间件；</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-39-bb7e2a.png" alt=""></p><h2 id="参数解析-x-www-form-urlencoded" tabindex="-1">参数解析：x-www-form-urlencoded <a class="header-anchor" href="#参数解析-x-www-form-urlencoded" aria-label="Permalink to &quot;参数解析：x-www-form-urlencoded&quot;">​</a></h2><blockquote><p>请求地址：<code>http://localhost:8000/login</code></p></blockquote><ul><li>body 是 x-www-form-urlencoded 格式：</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-39-3509ba.png" alt=""></p><blockquote><p>获取 json 数据：(和 json 是一致的)</p></blockquote><ul><li>安装依赖： npm install koa-bodyparser;</li><li>使用 koa-bodyparser 的中间件；</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-40-6f5acd.png" alt=""></p><h2 id="参数解析-form-data" tabindex="-1">参数解析：form-data <a class="header-anchor" href="#参数解析-form-data" aria-label="Permalink to &quot;参数解析：form-data&quot;">​</a></h2><blockquote><p>请求地址：<code>http://localhost:8000/login</code></p></blockquote><ul><li>body 是 form-data 格式</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-41-b30ca2.png" alt=""></p><blockquote><p>解析 body 中的数据，我们需要使用 multer</p></blockquote><ul><li>安装依赖：npm install koa-multer;</li><li>使用 multer 中间件；</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-41-65db76.png" alt=""></p><h2 id="multer-上传文件" tabindex="-1">Multer 上传文件 <a class="header-anchor" href="#multer-上传文件" aria-label="Permalink to &quot;Multer 上传文件&quot;">​</a></h2><p><img src="https://img.xbin.cn/images/2023/10/10-20-42-40c837.png" alt=""></p><h2 id="静态服务器" tabindex="-1">静态服务器 <a class="header-anchor" href="#静态服务器" aria-label="Permalink to &quot;静态服务器&quot;">​</a></h2><blockquote><p>koa 并没有内置部署相关的功能，所以我们需要使用第三方库：</p></blockquote><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> koa-static</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>部署的过程类似于 express：</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-43-ed3414.png" alt=""></p><h2 id="数据的响应" tabindex="-1">数据的响应 <a class="header-anchor" href="#数据的响应" aria-label="Permalink to &quot;数据的响应&quot;">​</a></h2><blockquote><p>输出结果：body 将响应主体设置为以下之一：</p></blockquote><ul><li>string ：字符串数据</li><li>Buffer ：Buffer 数据</li><li>Stream ：流数据</li><li>Object|| Array：对象或者数组</li><li>null ：不输出任何内容</li><li>如果 response.status 尚未设置，Koa 会自动将状态设置为 200 或 204。</li></ul><blockquote><p>请求状态：status</p></blockquote><p><img src="https://img.xbin.cn/images/2023/10/10-20-43-3f3075.png" alt=""></p><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><p><img src="https://img.xbin.cn/images/2023/10/10-20-44-4dfb0f.png" alt=""></p><h2 id="创建-koa-的过程" tabindex="-1">创建 Koa 的过程 <a class="header-anchor" href="#创建-koa-的过程" aria-label="Permalink to &quot;创建 Koa 的过程&quot;">​</a></h2><p><img src="https://img.xbin.cn/images/2023/10/10-20-44-a030f2.png" alt=""></p><h2 id="开启监听" tabindex="-1">开启监听 <a class="header-anchor" href="#开启监听" aria-label="Permalink to &quot;开启监听&quot;">​</a></h2><p><img src="https://img.xbin.cn/images/2023/10/10-20-45-f4a58f.png" alt=""></p><h2 id="注册中间件" tabindex="-1">注册中间件 <a class="header-anchor" href="#注册中间件" aria-label="Permalink to &quot;注册中间件&quot;">​</a></h2><p><img src="https://img.xbin.cn/images/2023/10/10-20-45-82e0cd.png" alt=""></p><h2 id="监听回调" tabindex="-1">监听回调 <a class="header-anchor" href="#监听回调" aria-label="Permalink to &quot;监听回调&quot;">​</a></h2><p><img src="https://img.xbin.cn/images/2023/10/10-20-45-4814cb.png" alt=""></p><h2 id="compose-方法" tabindex="-1">compose 方法 <a class="header-anchor" href="#compose-方法" aria-label="Permalink to &quot;compose 方法&quot;">​</a></h2><p><img src="https://img.xbin.cn/images/2023/10/10-20-46-871d9f.png" alt=""></p><h2 id="和-express-对比" tabindex="-1">和 express 对比 <a class="header-anchor" href="#和-express-对比" aria-label="Permalink to &quot;和 express 对比&quot;">​</a></h2><blockquote><p>在学习了两个框架之后，我们应该已经可以发现 koa 和 express 的区别：</p></blockquote><blockquote><p>从架构设计上来说：</p></blockquote><blockquote><p>express 是完整和强大的，其中帮助我们内置了非常多好用的功能；</p></blockquote><blockquote><p>koa 是简洁和自由的，它只包含最核心的功能，并不会对我们使用其他中间件进行任何的限制。</p></blockquote><ul><li>甚至是在 app 中连最基本的 get、post 都没有给我们提供；</li><li>我们需要通过自己或者路由来判断请求方式或者其他功能；</li></ul><blockquote><p>因为 express 和 koa 框架他们的核心其实都是中间件：</p></blockquote><ul><li>但是他们的中间件事实上，它们的中间件的执行机制是不同的，特别是针对某个中间件中包含异步操作时；</li><li>所以，接下来，我们再来研究一下 express 和 koa 中间件的执行顺序问题；</li></ul><h2 id="案例实现" tabindex="-1">案例实现 <a class="header-anchor" href="#案例实现" aria-label="Permalink to &quot;案例实现&quot;">​</a></h2><blockquote><p>我通过一个需求来演示所有的过程：</p></blockquote><ul><li>假如有三个中间件会在一次请求中匹配到，并且按照顺序执行；</li><li>我希望最终实现的方案是： ✓ 在 middleware1 中，在 req.message 中添加一个字符串 aaa； ✓ 在 middleware2 中，在 req.message 中添加一个 字符串 bbb； ✓ 在 middleware3 中，在 req.message 中添加一个 字符串 ccc； ✓ 当所有内容添加结束后，在 middleware1 中，通过 res 返回最终的结果；</li></ul><blockquote><p>实现方案：</p></blockquote><ul><li>Express 同步数据的实现；</li><li>Express 异步数据的实现；</li><li>Koa 同步数据的实现；</li><li>Koa 异步数据的实现； <blockquote><p>具体的代码查看课堂演练</p></blockquote></li></ul><h2 id="koa-洋葱模型" tabindex="-1">koa 洋葱模型 <a class="header-anchor" href="#koa-洋葱模型" aria-label="Permalink to &quot;koa 洋葱模型&quot;">​</a></h2><p>两层理解含义：</p><ul><li>中间件处理代码的过程；</li><li>Response 返回 body 执行；</li></ul><p><img src="https://img.xbin.cn/images/2023/10/10-20-47-352d4b.png" alt=""></p>',96),s=[t];function p(r,c,n,u,d,h){return o(),a("div",null,s)}const m=e(i,[["render",p]]);export{k as __pageData,m as default};
