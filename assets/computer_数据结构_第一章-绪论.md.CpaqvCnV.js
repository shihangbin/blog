import{_ as o,c as e,o as c,a5 as d}from"./chunks/framework.DwbewbAn.js";const f=JSON.parse('{"title":"绪论","description":"","frontmatter":{},"headers":[],"relativePath":"computer/数据结构/第一章-绪论.md","filePath":"computer/数据结构/第一章-绪论.md","lastUpdated":1706783961000}'),l={name:"computer/数据结构/第一章-绪论.md"},i=d('<h1 id="绪论" tabindex="-1">绪论 <a class="header-anchor" href="#绪论" aria-label="Permalink to &quot;绪论&quot;">​</a></h1><h2 id="第一节-基本概述" tabindex="-1">第一节 基本概述 <a class="header-anchor" href="#第一节-基本概述" aria-label="Permalink to &quot;第一节 基本概述&quot;">​</a></h2><p>数据结构的组成部分：</p><ol><li>逻辑结构（内在关系）</li><li>存储（物理）结构（存放形式）</li><li>对数据的运算（删除，插入，查找，修改，排序）</li></ol><p>数据：在计算机科学中指所有能输入到计算机中并被计算机陈旭处理的符号<code>总称</code>。例如，整数、实数和字符串都是数据。</p><p>数据元素：数据元数是数据的<code>基本单位</code>，也称节点或记录。</p><p>数据项：数据项是数据处理中的<code>最小单位</code>，是数据记录的基本单位，不可分的数据单位。</p><p>数据对象：数据对象是<code>性质相同的数据元素</code>的集合，是数据的子集。</p><p>大小关系：数据 &gt; 对象 &gt; 元素 &gt; 项</p><p>数据结构 (D,R)/(D,S)：数据结构是相互之间存在一种或多种特定<code>关系</code>的数据<code>元素</code>的集合。</p><p>数据的逻辑结构：数据的逻辑结构是对数据元素之间逻辑关系的<code>描述</code>。它与数据的<code>存储无关，是独立于计算机的</code>。主要分为两类：<code>线性结构</code>和<code>非线性结构</code>，其中<code>集合、图、树形结构数据非线性结构</code>。</p><ol><li>线性结构：结构中的数据元素之间存在<code>一对一</code>的关系。</li><li>集合：结构中的数据元素除了同属于一种类型外，别无其他关系。</li><li>树形结构：结构中数据元素之间存在<code>一对多</code>的关系。</li><li>图状结构（网状结构）：结构中元素之间存在<code>多对多</code>的关系。</li></ol><p>数据的存储结构：存储结构又称<code>物理结构</code>（依赖计算机）是数据结构在计算机中的实际表示方式，它包含对数据元素的表示和对关系的表示</p><ol><li>顺序存储：节点之间的逻辑关系由存储单元的<code>相邻位置</code>体现，通常借助程序语言的数组类型来描述。其优点是<code>存储密度大，可实现随机存取</code>。（主要用于查找）</li><li>链式存储：不要求逻辑上相邻的节点在存储位置上相邻，结点之间的逻辑关系是由附加的<code>结点指针</code>来反映。（主要用于插入，删除）</li><li>索引存储（分块）：索引存储方法在存储结点信息时除建立存储结点信息外，还建立附加的索引来标识节点地址。</li><li>散列存储（哈希）：根据结点的关键字通过散列函数直接计算出该结点的存储地址，这种存储方法本质上是顺序存储方法的扩展。</li></ol><h2 id="第二节-数据类型与抽象数据类型-adt" tabindex="-1">第二节 数据类型与抽象数据类型（ADT） <a class="header-anchor" href="#第二节-数据类型与抽象数据类型-adt" aria-label="Permalink to &quot;第二节 数据类型与抽象数据类型（ADT）&quot;">​</a></h2><p>数据类型分类：</p><ol><li>原子类型</li><li>结构类型（数组，广义表）</li></ol><p>数据类型：数据类型是一个<code>值</code>的<code>集合</code>和定义在这个值集合上的一组操作的<code>总称</code>。整形（int）、实型（即浮点型 float）、字符型（char）等基本类型。</p><p>抽象数据（定义取决与逻辑结构）类型：数据<code>对象</code>、数据对象上<code>关系</code>的集合以及对数据对象的基本<code>操作</code>的集合。</p><p>ADT 抽象数据类型名：</p><ol><li>数据<code>对象</code>（数据集）D</li><li>数据<code>关系</code>（结构集）S</li><li>基本<code>操作</code> P</li></ol><p>抽象数据类型作用：能独立定义数据结构，是高级的数据类型。</p><h2 id="第三节-算法" tabindex="-1">第三节 算法 <a class="header-anchor" href="#第三节-算法" aria-label="Permalink to &quot;第三节 算法&quot;">​</a></h2><p>算法是对特定问题求解步骤的一种<code>描述</code>，它是<code>指令的有限（有穷）序列</code>，其中每一条指令表示一个或多个操作。</p><p>程序的定义：用某种程序设计语言对算法进行具体实现（程序 = 数据结构 + 算法）</p><p>算法的特性：</p><ol><li><code>有</code>穷性：一个算法必须保证执行<code>有限步之后结束</code>且每一步必须在有穷时间内完成。</li><li><code>确</code>定性：算法的每一步骤必须<code>有确定的定义，不会产生二义性</code>。</li><li><code>可</code>行性：算法中的所有操作都必须可以通过已经实现的基本操作进行运算，并在有限次内实现，且人们用笔和纸做<code>有限次运算后也可以完成</code>。</li><li><code>输</code>入性：一个算法<code>有0个或者多个输入</code>，以<code>刻画运算对象的初始情况</code>，所谓的 0 个输入是指算法本身确定了初始条件。</li><li>输<code>出</code>性：一个算法有<code>一个或者多个输出</code>，以<code>反映对输入数据加工后的结果</code>。</li></ol><p>算法设计的基本要求：</p><ol><li><code>正</code>确性：要求算法能够正确地执行预先规定的功能和性能要求，这是最重要也是最<code>基本的标准</code>。</li><li><code>可</code>读性：要求算法<code>易于让人理解</code>。</li><li><code>健</code>壮性：要求算法有很好的<code>容错性</code>，能够对不合理的数据进行检查。</li><li><code>高</code>效性（时间）与<code>低</code>存储量（空间）需求：算法的效率主要是指算法的执行时间，对于同一个问题如果有多种算法可以求解，执行时间短的算法效率高，算法的存储量是指算法执行过程中所需要的最大量储存空间。高效率和低存储量这两者都与<code>问题规模</code>有关，且是衡量算法好坏的两个重要指标。</li></ol><h2 id="第四节-时间复杂度" tabindex="-1">第四节 时间复杂度 <a class="header-anchor" href="#第四节-时间复杂度" aria-label="Permalink to &quot;第四节 时间复杂度&quot;">​</a></h2><p>算法效率分析的<code>目的</code>是看算法实际是否可行，并在同一问题存在多个算法时，可进行时间和空间性能上的比较，以便从中挑选出较优算法。</p><p>衡量算法的方法有两种：<code>事后统计</code>和<code>事前分析估算法</code>，事后统计法需要先将算法实现，然后在测量其时间和空间开销，会有缺陷。所以我们一般采用的是<code>事前分析估算法</code>，计算算法的<code>时间复杂度</code>和<code>空间复杂度</code>来衡量算法的效率。</p><p>问题规模（n 输入量的大小）：问题规模是算法求解问题输入量的多少，是问题大小的本质表示，一般用证书 n 表示。</p><p>语句频度（ f(n)语句执行次数 ）：一条语句的重复执行次数称作语句频度，一个算法执行时间可用该算法中所有语句频度之间和 f(n) 来度量。</p><blockquote><p>时间复杂度：O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</p></blockquote><p>求时间复杂度总结：</p><ol><li>程序执行次数为常数 O(1)</li><li>对于一个 for：增量为 ++/-- 时间复杂度与未知数有关。增量为 i = i * a 时间复杂度为对数阶，乘谁以谁为底。O(log<sub>a</sub>n)</li><li>对于多个循环：每一个循环的执行次数相乘 = f(n)</li></ol><p>【案例 1】题型已知语句频度时间复杂度 f(n) = 2n<sup>3</sup> + 4n<sup>2</sup> + 100</p><p>步骤：</p><ol><li>留最大项，常数为 O(1)</li><li>去系数</li><li>f(n) = 2n<sup>3</sup> + 4n<sup>2</sup> + 100 =&gt; 2n<sup>3</sup> =&gt; O(n<sup>3</sup>)</li></ol><p>【案例 2】假设时间复杂度为 O(n<sup>2</sup>) 的算法在有 200 个元素的数组上运行需要 3.1ms，则在有 400 个元素的数组上运行需要 <u>12.4</u> ms。</p><p>分析：</p><ol><li>已知 n = 200 =&gt; O(n<sup>2</sup>) =&gt; 3.1 =&gt; (200)<sup>2</sup> =&gt; 3.1</li><li>n = 400 =&gt; (400)<sup>2</sup> =&gt; (200*200)<sup>2</sup> =&gt; 4 * (200)<sup>2</sup> =&gt; 4 * 3.1 =&gt; 12.4</li></ol><h2 id="第五节-空间复杂度" tabindex="-1">第五节 空间复杂度 <a class="header-anchor" href="#第五节-空间复杂度" aria-label="Permalink to &quot;第五节 空间复杂度&quot;">​</a></h2><p>算法的控价复杂度 O(n)，定义为该算法所耗费的存储空间，一个程序除了需要存储空间来存放本身所用数据外，也需要一些对数据进行操作的工作单元和存储一些为计算所需的辅助空间。算法原地工作是指算法所需辅助空间是常量，即 O(1).</p>',45),p=[i];function a(t,s,n,u,r,h){return c(),e("div",null,p)}const b=o(l,[["render",a]]);export{f as __pageData,b as default};
