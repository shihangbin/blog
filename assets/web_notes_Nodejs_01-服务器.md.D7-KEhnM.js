import{_ as a,c as e,o as i,a5 as l}from"./chunks/framework.DwbewbAn.js";const P=JSON.parse('{"title":"服务器","description":"","frontmatter":{},"headers":[],"relativePath":"web_notes/Nodejs/01-服务器.md","filePath":"web_notes/Nodejs/01-服务器.md","lastUpdated":1709045840000}'),o={name:"web_notes/Nodejs/01-服务器.md"},t=l('<h1 id="服务器" tabindex="-1">服务器 <a class="header-anchor" href="#服务器" aria-label="Permalink to &quot;服务器&quot;">​</a></h1><h2 id="服务器架构" tabindex="-1">服务器架构 <a class="header-anchor" href="#服务器架构" aria-label="Permalink to &quot;服务器架构&quot;">​</a></h2><ul><li>B/S 架构：Browser（浏览器）/ Server（服务器）</li><li>C/S 架构：Client（客户端）/ Server（服务器）</li></ul><h2 id="网络协议" tabindex="-1">网络协议 <a class="header-anchor" href="#网络协议" aria-label="Permalink to &quot;网络协议&quot;">​</a></h2><p>网络协议，是指计算机伪类能够在网络中进行数据的交换，从而建立的一个规则，标准。</p><h2 id="tcp-ip-协议" tabindex="-1">TCP/IP 协议 <a class="header-anchor" href="#tcp-ip-协议" aria-label="Permalink to &quot;TCP/IP 协议&quot;">​</a></h2><p>TCP/IP 协议，称为“网络通信协议”，是指互联网中最基本的协议。全世界所有的计算机都要遵循这个协议。</p><p>TCP/IP 协议是一个协议组，在协议下还包含小的协议：</p><ul><li>HTTP（S）</li><li>TCP</li><li>IP</li><li>DNS</li><li>……</li></ul><h2 id="状态码" tabindex="-1">状态码 <a class="header-anchor" href="#状态码" aria-label="Permalink to &quot;状态码&quot;">​</a></h2><ul><li><p>概念：指一次请求在处理中的实时状态。根据状态的不同，用指定 3 个数字的组合来表示请求的不同状态。</p></li><li><p>常见状态码</p><ul><li><code>404</code>:表示当前请求对应的资源没找到。资源可以是页面、图片、视频、路由。即 Not found</li><li><code>200</code>:表示请求正常处理完毕。一般会表示请求成功</li><li><code>304</code>:指资源无修改，会直接使用缓存。</li><li><code>500</code>:指服务器程序错误。一般是指服务器程序有 bug，即代码不对</li><li><code>401</code>:指请求未授权访问。即浏览器没有权限</li><li><code>403</code>:请求被服务器拒绝。比如防盗链，图片限制下载。</li></ul></li><li><p>概念：指一次请求在处理中的实时状态。根据状态的不同，用指定 3 个数字的组合来表示请求的不同状态。</p></li><li><p>常见状态码</p><ul><li><code>404</code>:表示当前请求对应的资源没找到。资源可以是页面、图片、视频、路由。即 Not found</li><li><code>200</code>:表示请求正常处理完毕。一般会表示请求成功</li><li><code>304</code>:指资源无修改，会直接使用缓存。</li><li><code>500</code>:指服务器程序错误。一般是指服务器程序有 bug，即代码不对</li><li><code>401</code>:指请求未授权访问。即浏览器没有权限</li><li><code>403</code>:请求被服务器拒绝。比如防盗链，图片限制下载。</li></ul></li></ul><h2 id="在浏览器中输入-url-后发生什么" tabindex="-1">在浏览器中输入 URL 后发生什么 <a class="header-anchor" href="#在浏览器中输入-url-后发生什么" aria-label="Permalink to &quot;在浏览器中输入 URL 后发生什么&quot;">​</a></h2><h3 id="_1-域名解析" tabindex="-1">1.域名解析 <a class="header-anchor" href="#_1-域名解析" aria-label="Permalink to &quot;1.域名解析&quot;">​</a></h3><p>“域名”就是我们平常说的网址：如<code>https://www.xiaobinw.cn</code>中的<code>www.xiaobinw.cn</code>就是我自己的域名。</p><p>真正访问一个计算机是通过计算机的 IP 地址去访问，但是 IP 地址不容易记忆，所以出现了域名。</p><p>“域名解析”指的是通过 DNS 服务器（域名解析服务器）对域名进行解析，找到对应的计算机 IP 地址。###</p><h3 id="_2-建立-tcp-链接" tabindex="-1">2.建立 TCP 链接 <a class="header-anchor" href="#_2-建立-tcp-链接" aria-label="Permalink to &quot;2.建立 TCP 链接&quot;">​</a></h3><p>TCP （传输控制协议）用于保证计算机之间的数据传递的完整和安全性。</p><h4 id="三次握手" tabindex="-1">三次握手： <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手：&quot;">​</a></h4><p>TCP 通过三次握手来保证数据的完整和安全，三次握手是为了保证客户端和服务端都处于正常的工作状态。</p><p><img src="https://img.xbin.cn/images/2023/07/24-03-19-a97a70.png" alt="image-20230130221809665"></p><h3 id="_3-客户端发送请求服务器处理请求" tabindex="-1">3.客户端发送请求服务器处理请求 <a class="header-anchor" href="#_3-客户端发送请求服务器处理请求" aria-label="Permalink to &quot;3.客户端发送请求服务器处理请求&quot;">​</a></h3><p>TCP 连接成功后，浏览器就可以利用 HTTP 协议向服务器发送请求了。</p><p>服务器接收请求后，开始处理请求，处理完请求后，服务器将处理的结果返回（响应）给客户端</p><h3 id="_4-关闭-tcp-连接" tabindex="-1">4.关闭 TCP 连接 <a class="header-anchor" href="#_4-关闭-tcp-连接" aria-label="Permalink to &quot;4.关闭 TCP 连接&quot;">​</a></h3><p>客户端接收到服务器发送的数据后，需要通过 TCP 协议来断开与服务器的连接。</p><h4 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h4><p><img src="https://img.xbin.cn/images/2023/07/24-03-19-eb0a24.png" alt="image-20230130222805199"></p><h3 id="_5-浏览器渲染页面" tabindex="-1">5.浏览器渲染页面 <a class="header-anchor" href="#_5-浏览器渲染页面" aria-label="Permalink to &quot;5.浏览器渲染页面&quot;">​</a></h3><p>浏览器接收到服务器响应的数据后，开始对数据进行解析渲染。</p>',30),r=[t];function d(c,h,n,s,p,u){return i(),e("div",null,r)}const b=a(o,[["render",d]]);export{P as __pageData,b as default};
