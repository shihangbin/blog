import{_ as l,c as o,o as e,a5 as t}from"./chunks/framework.DwbewbAn.js";const n=JSON.parse('{"title":"认识 SQL 语句","description":"","frontmatter":{},"headers":[],"relativePath":"web_notes/MySQL/02-认识SQL语句.md","filePath":"web_notes/MySQL/02-认识SQL语句.md","lastUpdated":1709045840000}'),c={name:"web_notes/MySQL/02-认识SQL语句.md"},u=t('<h1 id="认识-sql-语句" tabindex="-1">认识 SQL 语句 <a class="header-anchor" href="#认识-sql-语句" aria-label="Permalink to &quot;认识 SQL 语句&quot;">​</a></h1><blockquote><p>我们希望操作数据库（特别是在程序中），就需要有和数据库沟通的语言，这个语言就是 SQL：</p></blockquote><ul><li>SQL 是 <code>Structured Query Language</code>，称之为<code>结构化查询语言</code>，简称 <code>SQL</code>；</li><li>使用 <code>SQL 编写出来的语句</code>，就称之为 <code>SQL 语句</code>；</li><li>SQL 语句可以用于<code>对数据库进行操作</code>；</li></ul><blockquote><p>事实上，常见的关系型数据库 SQL 语句都是比较相似的，所以你学会了 MySQL 中的 SQL 语句，之后去操作比如 Oracle 或者其他</p></blockquote><p>关系型数据库，也是非常方便的。</p><blockquote><p>SQL 语句的常用规范：</p></blockquote><ul><li>通常关键字使用大写的，比如 CREATE、TABLE、SHOW 等等；</li><li>一条语句结束后，需要以 ; 结尾；</li><li>如果遇到关键字作为表明或者字段名称，可以使用``包裹;</li></ul><h2 id="sql-语句的分类" tabindex="-1">SQL 语句的分类 <a class="header-anchor" href="#sql-语句的分类" aria-label="Permalink to &quot;SQL 语句的分类&quot;">​</a></h2><blockquote><p>DDL（Data Definition Language）：数据定义语言；</p></blockquote><ul><li>可以通过 DDL 语句对数据库或者表进行：创建、删除、修改等操作；</li></ul><blockquote><p>DML（Data Manipulation Language）：数据操作语言；</p></blockquote><ul><li>可以通过 DML 语句对表进行：添加、删除、修改等操作；</li></ul><blockquote><p>DQL（Data Query Language）：数据查询语言；</p></blockquote><ul><li>可以通过 DQL 从数据库中查询记录；（重点）</li></ul><blockquote><p>DCL（Data Control Language）：数据控制语言；</p></blockquote><ul><li>对数据库、表格的权限进行相关访问控制操作；</li></ul><blockquote><p>接下来我们对他们进行一个个的学习和掌握。</p></blockquote><h2 id="sql-的数据类型-–-数字类型" tabindex="-1">SQL 的数据类型 – 数字类型 <a class="header-anchor" href="#sql-的数据类型-–-数字类型" aria-label="Permalink to &quot;SQL 的数据类型 – 数字类型&quot;">​</a></h2><blockquote><p>我们知道不同的数据会划分为不同的数据类型，在数据库中也是一样：</p></blockquote><ul><li>MySQL 支持的数据类型有：<code>数字类型，日期和时间类型，字符串（字符和字节）</code>类型，空间类型和 JSON 数据类型。</li></ul><blockquote><p>数字类型</p></blockquote><ul><li>MySQL 的数字类型有很多：</li><li>整数数字类型：<code>INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT</code>； <ul><li><img src="https://img.xbin.cn/images/2023/10/07-01-14-305014.png" alt=""></li></ul></li><li>浮点数字类型：<code>FLOAT，DOUBLE</code>（FLOAT 是 4 个字节，DOUBLE 是 8 个字节）；</li><li>精确数字类型：<code>DECIMAL，NUMERIC</code>（DECIMAL 是 NUMERIC 的实现形式）；</li></ul><h2 id="sql-的数据类型-–-日期类型" tabindex="-1">SQL 的数据类型 – 日期类型 <a class="header-anchor" href="#sql-的数据类型-–-日期类型" aria-label="Permalink to &quot;SQL 的数据类型 – 日期类型&quot;">​</a></h2><blockquote><p>MySQL 的日期类型也很多：</p></blockquote><blockquote><p>YEAR 以 YYYY 格式显示值</p></blockquote><ul><li>范围 1901 到 2155，和 0000。</li></ul><blockquote><p>DATE 类型用于具有日期部分但没有时间部分的值：</p></blockquote><ul><li>DATE 以格式 YYYY-MM-DD 显示值 ；</li><li>支持的范围是 &#39;1000-01-01&#39; 到 &#39;9999-12-31&#39;；</li></ul><blockquote><p>DATETIME 类型用于包含日期和时间部分的值：</p></blockquote><ul><li>DATETIME 以格式&#39;YYYY-MM-DD hh:mm:ss&#39;显示值；</li><li>支持的范围是 1000-01-01 00:00:00 到 9999-12-31 23:59:59;</li></ul><blockquote><p>TIMESTAMP 数据类型被用于同时包含日期和时间部分的值：</p></blockquote><ul><li>TIMESTAMP 以格式&#39;YYYY-MM-DD hh:mm:ss&#39;显示值；</li><li>但是它的范围是 UTC 的时间范围：&#39;1970-01-01 00:00:01&#39;到&#39;2038-01-19 03:14:07&#39;;</li></ul><blockquote><p>另外：DATETIME 或 TIMESTAMP 值可以包括在高达微秒（6 位）精度的后小数秒一部分（了解）</p></blockquote><ul><li>比如 DATETIME 表示的范围可以是&#39;1000-01-01 00:00:00.000000&#39;到&#39;9999-12-31 23:59:59.999999&#39;;</li></ul><h2 id="sql-的数据类型-–-字符串类型" tabindex="-1">SQL 的数据类型 – 字符串类型 <a class="header-anchor" href="#sql-的数据类型-–-字符串类型" aria-label="Permalink to &quot;SQL 的数据类型 – 字符串类型&quot;">​</a></h2><blockquote><p>MySQL 的字符串类型表示方式如下：</p></blockquote><blockquote><p>CHAR 类型在创建表时为固定长度，长度可以是 0 到 255 之间的任何值；</p></blockquote><ul><li>在被查询时，会删除后面的空格；</li></ul><blockquote><p>VARCHAR 类型的值是可变长度的字符串，长度可以指定为 0 到 65535 之间的值；</p></blockquote><ul><li>在被查询时，不会删除后面的空格；</li></ul><blockquote><p>BINARY 和 VARBINARY 类型用于存储二进制字符串，存储的是字节字符串；</p></blockquote><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html" target="_blank" rel="noreferrer">https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</a></li></ul><blockquote><p>BLOB 用于存储大的二进制类型；</p></blockquote><blockquote><p>TEXT 用于存储大的字符串类型；</p></blockquote><h2 id="表约束" tabindex="-1">表约束 <a class="header-anchor" href="#表约束" aria-label="Permalink to &quot;表约束&quot;">​</a></h2><blockquote><p>主键：PRIMARY KEY</p></blockquote><ul><li>一张表中，我们为了区分<code>每一条记录的唯一性</code>，必须<code>有一个字段是永远不会重复</code>，并且<code>不会为</code>空的，这个字段我们通常会将它设</li></ul><p>置为<code>主键</code>：</p><ul><li>主键是表中唯一的索引；</li><li>并且必须是 <code>NOT NULL</code> 的，如果没有设置 NOT NULL，那么 MySQL 也会隐式的设置为 NOT NULL；</li><li>主键也可以是多列索引，<code>PRIMARY KEY(key_part, ...)</code>，我们一般称之为<code>联合主键</code>；</li><li>建议：开发中主键字段应该是和业务无关的，尽量不要使用业务字段来作为主键；</li></ul><blockquote><p>唯一：UNIQUE</p></blockquote><ul><li>某些<code>字段在开发中我们希望是唯一的</code>，<code>不会重复</code>的，比如手机号码、身份证号码等，这个字段我们可以使用 UNIQUE 来约束：</li><li><code>使用 UNIQUE 约束的字段在表中必须是不同</code>的；</li><li>UNIQUE 索引允许 NULL 包含的列具有多个值 NULL；</li></ul><blockquote><p>不能为空：NOT NULL</p></blockquote><ul><li>某些字段我们要求用户必须插入值，不可以为空，这个时候我们可以使用 NOT NULL 来约束；</li></ul><blockquote><p>默认值：DEFAULT</p></blockquote><ul><li>某些字段我们希望在没有设置值时给予一个默认值，这个时候我们可以使用 DEFAULT 来完成；</li></ul><blockquote><p>自动递增：AUTO_INCREMENT</p></blockquote><ul><li>某些字段我们希望不设置值时可以进行递增，比如用户的 id，这个时候可以使用 AUTO_INCREMENT 来完成；</li></ul><blockquote><p>外键约束也是最常用的一种约束手段，我们再讲到多表关系时，再进行讲解；</p></blockquote>',58),i=[u];function a(q,d,p,b,r,L){return e(),o("div",null,i)}const s=l(c,[["render",a]]);export{n as __pageData,s as default};
